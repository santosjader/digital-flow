services:
  n8n:
    image: docker.n8n.io/n8nio/n8n
    volumes:
      - n8n_data:/home/node/.n8n
    networks:
      - app_network
      - proxy_network
    environment:
      - WEBHOOK_URL=${WEBHOOK_URL}
      - DB_TYPE=${DB_TYPE}
      - DB_POSTGRESDB_HOST=${DB_POSTGRESDB_HOST}
      - DB_POSTGRESDB_PORT=${DB_POSTGRESDB_PORT}
      - DB_POSTGRESDB_DATABASE=${DB_POSTGRESDB_DATABASE}
      - DB_POSTGRESDB_USER=${DB_POSTGRESDB_USER}
      - DB_POSTGRESDB_PASSWORD=${DB_POSTGRESDB_PASSWORD}
      - DB_POSTGRESDB_SCHEMA=${DB_POSTGRESDB_SCHEMA}
      - N8N_REDIS_HOST=${N8N_REDIS_HOST}
      - N8N_REDIS_PORT=${N8N_REDIS_PORT}
      - N8N_QUEUE_MODE=true
      - QUEUE_BULL_REDIS_DB=${QUEUE_BULL_REDIS_DB}
      - GENERIC_TIMEZONE=${GENERIC_TIMEZONE}
    logging:
      driver: json-file
      options:
        max-size: 10m
        max-file: "3"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5678/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback 
        monitor: 60s
        max_failure_ratio: 0.2
      placement:
        constraints:
          - node.role == worker
volumes:
  n8n_data:
    external: true
networks:
  app_network:
    external: true
  proxy_network:
    external: true
